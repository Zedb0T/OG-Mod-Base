;;-*-Lisp-*-
(in-package goal)

;; For debug-only additions to the mod-base. Anything defined in this file will be unavailable in retail mode.
(declare-file (debug))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Additional debug menu(s)
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun-debug debug-menu-make-modding-tools-menu ((ctx debug-menu-context))
  (let ((modding-tools-menu (new 'debug 'debug-menu ctx "Modding Tools")))
    ;; orb-placer menu
    (let ((orb-placer-menu (new 'debug 'debug-menu ctx "Orb Placer")))
      (debug-menu-append-item orb-placer-menu (new-dm-bool "Edit Mode?" *orb-placer-enabled?* dm-boolean-toggle-pick-func))
      (debug-menu-append-item orb-placer-menu (new-dm-func "Add Orb" #f orb-placer-add))
      (let ((select-orb-menu (new 'debug 'debug-menu ctx "Select Orb")))
        (set! *orb-placer-select-menu* select-orb-menu)
        ;; populated on orb add
        (debug-menu-append-item orb-placer-menu (new-dm-submenu "Select Orb" select-orb-menu)))
      (debug-menu-append-item orb-placer-menu (new-dm-func "Print Selected Orb Position" #f orb-placer-print-selected))
      (debug-menu-append-item orb-placer-menu (new-dm-func "Print All Orb Positions" #f orb-placer-print-all))
      (debug-menu-append-item modding-tools-menu (new-dm-submenu "Orb Placer" orb-placer-menu)))
    (new-dm-submenu "Modding Tools" modding-tools-menu)))

(define-extern *should-display-idle-deload-info?* symbol)

(defun-debug debug-menu-make-speedrun-tools-menu ((ctx debug-menu-context))
  (let ((speedrun-tools-menu (new 'debug 'debug-menu ctx "Speedrun Tools")))
    ;; general stuff
    ;; (debug-menu-append-item speedrun-tools-menu (new-dm-func "Input Display" #f (lambda () (not! (-> *speedrun-info* show-input-display?)))))
    ;; (debug-menu-append-item speedrun-tools-menu (new-dm-bool "Show blocking-planes" *show-blocking-planes?* dm-boolean-toggle-pick-func))
    (debug-menu-append-item speedrun-tools-menu
                            (new-dm-func "Idle Deload Display" #f (lambda () (not! *should-display-idle-deload-info?*))))
    ;; (debug-menu-append-item speedrun-tools-menu (new-dm-func "Plant Deload Display" #f (lambda () (not! (-> *speedrun-info* should-display-plant-deload-info?)))))
    ;; (debug-menu-append-item speedrun-tools-menu (new-dm-func "Show Speedometer" #f (lambda () (if *show-speedometer?* (j1-speedometer-off)(j1-speedometer-on)))))
    ;; (debug-menu-append-item speedrun-tools-menu (new-dm-func "Masher" #f (lambda () (if *masher-on?* (masher-off)(masher-on)))))
    ;; (let ((citadel-hops-menu (new 'debug 'debug-menu ctx "Citadel Hops")))
    ;;   (debug-menu-append-item citadel-hops-menu (new-dm-bool "Show blocking-planes" *show-blocking-planes?* dm-boolean-toggle-pick-func))
    ;;   ;; (debug-menu-append-item citadel-hops-menu (new-dm-bool "Show bottom-height (death planes)" *show-bottom-height?* dm-boolean-toggle-pick-func))
    ;;   (debug-menu-append-item citadel-hops-menu (new-dm-bool "Show Green Sage cutscene plane" *show-greensage-cutscene-plane?* dm-boolean-toggle-pick-func))
    ;;   (debug-menu-append-item speedrun-tools-menu (new-dm-submenu "Citadel Hops" citadel-hops-menu))
    ;;   )
    (new-dm-submenu "Speedrun Tools" speedrun-tools-menu)))

(when (-> *debug-menu-context* root-menu)
  (debug-menu-append-item (-> *debug-menu-context* root-menu) (debug-menu-make-modding-tools-menu *debug-menu-context*))
  (debug-menu-append-item (-> *debug-menu-context* root-menu) (debug-menu-make-speedrun-tools-menu *debug-menu-context*)))
