;; name: mod-remote-interaction.gc
;; name in dgo: mod-remote-interaction
;; dgos: TODO

(defun safe-release-from-grab ()
  ;;don't release if not grabbed (as this escapes certain states and cutscenes) and not if in freecam
  (when (and (is-grabbed?) (not (has-camera-type? 'cam-free-floating)))
    (process-release? *target*)))

(defun reset-specific-actor ((actor-name string))
  (let* ((actor-obj (process-by-ename actor-name)))
    (when (-> actor-obj entity)
      (kill! (-> actor-obj entity))
      (update-perm! (-> actor-obj entity extra perm) 'life (the-as entity-perm-status 623))))
  (none))

(defun reset-all-present-warp-gates ()
  (let ((gate-training (process-by-ename "warp-gate-switch-8"))
        (gate-village1 (process-by-ename "warp-gate-switch-3"))
        (gate-village2 (process-by-ename "warp-gate-switch-7"))
        (gate-village3 (process-by-ename "warp-gate-switch-2"))
        (gate-citadel (process-by-ename "warp-gate-switch-12"))
        (gate-active #f))
    (when gate-training
      (if (and (-> gate-training child 0) (= (-> (the-as process-drawable (-> gate-training child 0)) state name) 'active))
        (set! gate-active #t))
      (reset-specific-actor "warp-gate-switch-8")
      (reset-specific-actor "training-part-1"))
    (when gate-village1
      (if (and (-> gate-village1 child 0) (= (-> (the-as process-drawable (-> gate-village1 child 0)) state name) 'active))
        (set! gate-active #t))
      (reset-specific-actor "warp-gate-switch-3")
      (reset-specific-actor "villagea-part-1"))
    (when (and gate-village2 (task-closed? (game-task village2-levitator) (task-status need-reminder-a)))
      (if (and (-> gate-village2 child 0) (= (-> (the-as process-drawable (-> gate-village2 child 0)) state name) 'active))
        (set! gate-active #t))
      (reset-specific-actor "warp-gate-switch-7")
      (reset-specific-actor "villageb-part-55"))
    (when (and gate-village3 (task-closed? (game-task village3-button) (task-status need-introduction)))
      (if (and (-> gate-village3 child 0) (= (-> (the-as process-drawable (-> gate-village3 child 0)) state name) 'active))
        (set! gate-active #t))
      (reset-specific-actor "warp-gate-switch-2")
      (reset-specific-actor "villagec-part-32"))
    (when (and gate-citadel (task-closed? (game-task village4-button) (task-status need-reward-speech)))
      (if (and (-> gate-citadel child 0) (= (-> (the-as process-drawable (-> gate-citadel child 0)) state name) 'active))
        (set! gate-active #t))
      (reset-specific-actor "warp-gate-switch-12")
      (reset-specific-actor "citb-part-1"))
    (if (and (name= (-> *target* state name) 'target-grab) gate-active) (safe-release-from-grab)))
  (none))

(defun level-is-alive-or-active? ((level-name string))
  (or (and (-> *level* level 0)
           (name= (-> *level* level 0 name) level-name)
           (or (= (-> *level* level 0 status) 'alive) (= (-> *level* level 0 status) 'active)))
      (and (-> *level* level 1)
           (name= (-> *level* level 1 name) level-name)
           (or (= (-> *level* level 1 status) 'alive) (= (-> *level* level 1 status) 'active)))))

(defun is-cell-collect? ((task game-task) (status task-status))
  (and (= status (task-status need-resolution))
       (!= task (game-task none))
       (!= task (game-task complete))
       (!= task (game-task firecanyon-assistant))
       (!= task (game-task village2-levitator))
       (!= task (game-task swamp-arm))
       (!= task (game-task village3-button))
       (!= task (game-task red-eggtop))
       (!= task (game-task lavatube-balls))
       (!= task (game-task lavatube-start))
       (!= task (game-task intro))
       (!= task (game-task village4-button))
       (!= task (game-task finalboss-movies))
       (!= task (game-task plunger-lurker-hit))
       (!= task (game-task leaving-misty))
       (!= task (game-task assistant-village3))
       (!= task (game-task max))))

(defun safe-kill-fuel-cell ((cell-name string))
  (let ((cell (process-by-ename cell-name)))
    (when cell
      (process-entity-status! (the-as fuel-cell cell) (entity-perm-status dead) #t)
      (deactivate cell))))

(defun safe-kill-all-fuel-cell-instances ((cell-name string))
  (process-entity-status! (the-as fuel-cell (process-by-ename cell-name)) (entity-perm-status dead) #t)
  (kill-by-name cell-name *active-pool*))

(defun safe-kill-fuel-cell-child ((name string))
  (let ((proc (the-as process (process-by-ename name))))
    (when (and proc (-> proc child))
      (let ((child (ppointer->process (-> proc child))))
        (when (type-type? (-> child type) fuel-cell)
          (process-entity-status! (the-as fuel-cell child) (entity-perm-status dead) #t)
          (deactivate child)))))
  (none))

(defun safe-kill-fuel-cell-brother ((name string))
  (let ((proc (the-as process (process-by-ename name))))
    (when (and proc (-> proc brother))
      (let ((brother (ppointer->process (-> proc brother))))
        (when (type-type? (-> brother type) fuel-cell)
          (process-entity-status! (the-as fuel-cell brother) (entity-perm-status dead) #t)
          (deactivate brother)))))
  (none))

(defun safe-complete-and-kill ((name string))
  (let ((proc (process-by-ename name)))
    (when proc
      (process-entity-status! proc (entity-perm-status dead) #t)
      (deactivate proc))))

(defun safe-kill-enemy ((enemy-name string))
  (let ((cur-enemy (process-by-ename enemy-name)))
    (when cur-enemy
      (cond
        ((type-type? (-> cur-enemy type) pelican)
         (let ((a0-2 (handle->process (-> (the-as pelican cur-enemy) fuel-cell))))
           (if (and a0-2 (!= (-> (the-as pelican cur-enemy) state name) 'pelican-circle))
             (send-event a0-2 'trans (-> (the-as pelican cur-enemy) root trans))))
         (if (!= (-> (the-as pelican cur-enemy) state name) 'pelican-explode) (go-process cur-enemy pelican-explode #f)))
        ((type-type? (-> cur-enemy type) robber)
         (go-process cur-enemy robber-die)
         (process-entity-status! cur-enemy (entity-perm-status complete) #t))
        ((type-type? (-> cur-enemy type) ram)
         (when (and (-> cur-enemy child) (type-type? (-> cur-enemy child 0 type) ram-boss))
           (go-virtual-process (the-as ram-boss (-> cur-enemy child 0)) nav-enemy-die)
           (go-process cur-enemy ram-fun-idle)))
        ((type-type? (-> cur-enemy type) gnawer)
         (if (not (or (= (-> cur-enemy state) gnawer-dying-give-pickups)
                      (= (-> cur-enemy state) gnawer-put-items-at-dest)
                      (= (-> cur-enemy state) gnawer-give-fuel-cell)))
           (go-process cur-enemy gnawer-die)))
        (else (send-event cur-enemy 'die)))))
  (none))

(defun safe-deactivate-ring ((ring-name string))
  (let ((ring (process-by-ename ring-name))) (if ring (go-process ring race-ring-idle))))

(defun get-ogreboss-phase ((level float) (stage int))
  (case level
    ((0.0)
     (case stage
       ((1) 7.0)
       ((2) 6.0)
       ((3) 5.0)))
    ((1.0)
     (case stage
       ((1) 4.0)
       ((2) 3.0)
       ((3) 2.0)))
    ((2.0)
     (case stage
       ((1) 1.0)
       ((2) 0.0)))))

(defun safe-boss-up-to-phase ((boss-name string) (to-phase int) (force-phase symbol))
  (if (= to-phase -1) (return #f))
  (let ((boss-enemy (process-by-ename boss-name)))
    (when boss-enemy
      (cond
        ((type-type? (-> boss-enemy type) plant-boss)
         (when (and (<= 0 to-phase) (> 3 to-phase) (or force-phase (> (-> (the-as plant-boss boss-enemy) health) to-phase)))
           (set! (-> (the-as plant-boss boss-enemy) health) (the float (+ to-phase 1)))
           (if (not force-phase) (go-process boss-enemy plant-boss-hit #f))))
        ((type-type? (-> boss-enemy type) ogreboss)
         (let ((boss-level (case to-phase
                             ((0 1) 2)
                             ((2 3 4) 1)
                             ((5 6 7) 0)))
               (bridge (the-as ogre-bridge (process-by-ename "ogre-bridge-1"))))
           (when bridge
             (if force-phase
               (set! (-> (the-as ogreboss boss-enemy) level) (the float boss-level)) ;; if force phase only change ogre level
               (when (and (<= (-> (the-as ogreboss boss-enemy) level) boss-level) ;; otherwise run the logic as normal
                          (not (name= (-> boss-enemy state name) "ogreboss-die"))
                          (not (name= (-> boss-enemy state name) "ogreboss-dead")))
                 (if (and (<= 0 boss-level) (>= 2 boss-level)) (set! (-> bridge dead-joint-count) (* boss-level 4)))
                 (let ((boss-getting-hit #f))
                   (case to-phase
                     ((0 3 6)
                      (when (or (name= (-> boss-enemy state name) "ogreboss-stage1")
                                (name= (-> boss-enemy state name) "ogreboss-intro")
                                (name= (-> boss-enemy state name) "ogreboss-wait-for-player"))
                        (go-process boss-enemy ogreboss-stage2)
                        (if (or (name= (-> bridge state name) "ogre-bridge-idle") (name= (-> bridge state name) "ogre-bridge-break"))
                          (go-process bridge ogre-bridge-activate))))
                     ((1 4 7)
                      (when (or (< (-> (the-as ogreboss boss-enemy) level) boss-level)
                                (name= (-> boss-enemy state name) "ogreboss-intro")
                                (name= (-> boss-enemy state name) "ogreboss-wait-for-player"))
                        (if (not (-> (the-as ogreboss boss-enemy) boulder)) (go-process boss-enemy ogreboss-stage1))))
                     ((2 5)
                      (if (and (name= (-> boss-enemy state name) "ogreboss-stage2") (name= (-> bridge state name) "ogre-bridge-activated"))
                        (go-process bridge ogre-bridge-break))
                      (cond
                        ((or (name= (-> boss-enemy state name) "ogreboss-stage3-shuffle") (name= (-> boss-enemy state name) "ogreboss-stage2"))
                         (set! boss-getting-hit #t)
                         (go-process boss-enemy ogreboss-stage3-hit))
                        ((not (name= (-> boss-enemy state name) "ogreboss-stage3-hit")) (go-process boss-enemy ogreboss-stage1)))))
                   (if (and (not boss-getting-hit)
                            (<= 0 boss-level)
                            (>= 2 boss-level)
                            (!= (-> (the-as ogreboss boss-enemy) level) (the float boss-level)))
                     (+! (-> (the-as ogreboss boss-enemy) level) (- (the float boss-level) (-> (the-as ogreboss boss-enemy) level))))))))))
        ((type-type? (-> boss-enemy type) robotboss)
         (let ((vent (process-by-ename "ecovent-274")))
           ;; ensures blue eco vent works
           (when (name= (-> boss-enemy state name) "robotboss-blue-wait")
             (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
               (set! (-> a1-0 from) boss-enemy)
               (set! (-> a1-0 num-params) 0)
               (set! (-> a1-0 message) 'show)
               (let ((t9-1 send-event-function)
                     (v1-1 (-> (the-as robotboss boss-enemy) alts 11)))
                 (t9-1 (if v1-1 (-> v1-1 extra process)) a1-0))))
           (when (or force-phase
                     (and vent
                          (not (name= (-> boss-enemy state name) "robotboss-daxter-sacrifice-movie"))
                          (not (name= (-> boss-enemy state name) "robotboss-white-eco-movie"))
                          (not (name= (-> boss-enemy state name) "robotboss-yellow-dark-bomb-wait"))
                          (not (name= (-> boss-enemy state name) "robotboss-yellow-dark-bomb"))))
             (case to-phase
               ((0)
                (if (= (-> (the-as robotboss boss-enemy) children-spawned) 0) (go-process vent vent-blocked))
                (go-process boss-enemy robotboss-yellow-dark-bomb))
               ((1)
                (when (or force-phase
                          (and (not (name= (-> boss-enemy state name) "boss-enemy robotboss-yellow-dark-bomb"))
                               (not (name= (-> boss-enemy state name) "robotboss-yellow-wait"))
                               (not (name= (-> boss-enemy state name) "robotboss-yellow"))))
                  ;; depspawn bombs from end phase if setback from death
                  (when force-phase
                    (dotimes (child-idx (-> (the-as robotboss boss-enemy) children-spawned))
                      (deactivate (-> boss-enemy child 0)))
                    (if (and (-> boss-enemy child 0) (type-type? (-> boss-enemy child 0 type) light-eco-mother))
                      (deactivate (-> boss-enemy child 0)))
                    (set! (-> (the-as robotboss boss-enemy) children-spawned) 0))
                  (if (= (-> (the-as robotboss boss-enemy) children-spawned) 0) (go-process vent vent-blocked))
                  (go-process boss-enemy robotboss-yellow)))
               ((2)
                (when (or force-phase
                          (and (not (name= (-> boss-enemy state name) "boss-enemy robotboss-yellow-dark-bomb"))
                               (not (name= (-> boss-enemy state name) "robotboss-yellow-wait"))
                               (not (name= (-> boss-enemy state name) "robotboss-yellow"))
                               (not (name= (-> boss-enemy state name) "robotboss-red-dark-bomb-wait"))
                               (not (name= (-> boss-enemy state name) "robotboss-red-dark-bomb"))))
                  (go-process vent vent-wait-for-touch)
                  (go-process boss-enemy robotboss-red-dark-bomb)))
               ((3)
                (when (or force-phase
                          (name= (-> boss-enemy state name) "robotboss-blue-wait")
                          (name= (-> boss-enemy state name) "robotboss-blue-dark-bomb")
                          (name= (-> boss-enemy state name) "robotboss-blue-dark-bomb-wait")
                          (name= (-> boss-enemy state name) "robotboss-green")
                          (name= (-> boss-enemy state name) "robotboss-green-wait")
                          (name= (-> boss-enemy state name) "robotboss-green-dark-bomb")
                          (name= (-> boss-enemy state name) "robotboss-green-dark-bomb-wait"))
                  (if (= (-> (the-as robotboss boss-enemy) children-spawned) 0) (go-process vent vent-blocked))
                  (go-process boss-enemy robotboss-red)))
               ((4)
                (when (or force-phase
                          (name= (-> boss-enemy state name) "robotboss-blue-wait")
                          (name= (-> boss-enemy state name) "robotboss-blue-dark-bomb")
                          (name= (-> boss-enemy state name) "robotboss-blue-dark-bomb-wait")
                          (name= (-> boss-enemy state name) "robotboss-green")
                          (name= (-> boss-enemy state name) "robotboss-green-wait"))
                  (go-process vent vent-wait-for-touch)
                  (go-process boss-enemy robotboss-green-dark-bomb)))
               ((5)
                (when (or force-phase
                          (name= (-> boss-enemy state name) "robotboss-blue-wait")
                          (name= (-> boss-enemy state name) "robotboss-blue-dark-bomb")
                          (name= (-> boss-enemy state name) "robotboss-blue-dark-bomb-wait"))
                  (if (= (-> (the-as robotboss boss-enemy) children-spawned) 0) (go-process vent vent-blocked))
                  (go-process boss-enemy robotboss-green)))
               ((6)
                (when (or force-phase (name= (-> boss-enemy state name) "robotboss-blue-wait"))
                  (go-process boss-enemy robotboss-blue-dark-bomb)
                  (go-process vent vent-wait-for-touch))))))))))
  (if (> *current-boss-phase* to-phase) (set! *current-boss-phase* to-phase))
  (none))

(defun safe-kill-klaww ()
  (let ((boss (process-by-ename "ogreboss-1"))
        (bridge (process-by-ename "ogre-bridge-1")))
    (when (and boss (!= (-> boss state name) 'ogreboss-die) (!= (-> boss state name) 'ogreboss-dead))
      (process-entity-status! boss (entity-perm-status complete) #t)
      (cond
        ((= (-> boss state name) 'ogreboss-stage1)
         (reset-specific-actor "ogreboss-1")
         (reset-specific-actor "ogre-step-a-4")
         (reset-specific-actor "ogre-step-a-3")
         (reset-specific-actor "ogre-step-b-2")
         (reset-specific-actor "ogre-step-a-2")
         (reset-specific-actor "ogre-step-d-1")
         (reset-specific-actor "ogre-step-c-1")
         (reset-specific-actor "ogre-step-b-1")
         (reset-specific-actor "ogre-step-a-1")
         (ogreboss-trigger-steps))
        (else (go-process boss ogreboss-die)))
      (when (has-camera-type? 'cam-circular)
        (send-event *camera* 'point-of-interest #f)))
    (when bridge
      (process-entity-status! bridge (entity-perm-status complete) #t)
      (if (or (name= (-> bridge state name) "ogre-bridge-idle") (name= (-> bridge state name) "ogre-bridge-break"))
        (go-process bridge ogre-bridge-activate)))))

(defun safe-break-crate ((crate-name string))
  (let* ((obj-crate (process-by-ename crate-name)))
    (when obj-crate
      (if (not (or (name= (-> (the-as crate obj-crate) state name) "die")
                   (name= (-> (the-as crate obj-crate) state name) "special-contents-die")))
        (go-virtual-process (the-as crate obj-crate) die #f 0))))
  (none))

(defun safe-kill-orb ((money-name string))
  (let ((orb (process-by-ename money-name)))
    (when orb
      (process-entity-status! (the-as money orb) (entity-perm-status dead) #t)
      (deactivate orb))))

(defun safe-kill-cache-orb ((cache-name string))
  (let* ((orb-cache (the-as orb-cache-top (process-by-ename cache-name))))
    (when (-> orb-cache state)
      (case (-> orb-cache state)
        ((orb-cache-top-activate)
         (if (and (>= (- (-> orb-cache money) 1) 0) (handle->process (-> orb-cache money-list (- (-> orb-cache money) 1))))
           (deactivate (handle->process (-> orb-cache money-list (- (-> orb-cache money) 1))))))
        ((orb-cache-top-idle)
         (when (>= (- (-> orb-cache money) 1) 0)
           (set! (-> orb-cache money) (- (-> orb-cache money) 1))
           (set! (-> orb-cache entity extra perm user-int16 0) (- 15 (-> orb-cache money)))))))
    (when (and orb-cache (<= (-> orb-cache money) 0))
      (process-entity-status! orb-cache (entity-perm-status complete) #f)
      (go-process orb-cache orb-cache-top-complete #t)))
  (none))

(defun safe-kill-plant-boss-orb ()
  (let ((boss (the-as plant-boss (process-by-ename "plant-boss-3"))))
    (when boss
      (if (handle->process (-> boss money)) (deactivate (handle->process (-> boss money))))
      (if (< (-> boss entity extra perm user-int8 1) 5) (+! (-> boss entity extra perm user-int8 1) 1))))
  (none))

(defun safe-kill-gnawer-orb ((gnawer-name string))
  (let ((gnawer (the-as gnawer (process-by-ename gnawer-name))))
    (when gnawer
      ;; kill if alive
      (when (not (or (= (-> gnawer state) gnawer-dying-give-pickups)
                     (= (-> gnawer state) gnawer-put-items-at-dest)
                     (= (-> gnawer state) gnawer-give-fuel-cell)))
        (process-entity-status! gnawer (entity-perm-status bit-3) #t)
        (process-entity-status! gnawer (entity-perm-status complete) #t)
        (logior! (-> gnawer entity extra perm status) (entity-perm-status user-set-from-cstage))
        (set! (-> gnawer entity extra perm user-int16 0) (the-as int (-> gnawer money-mask))))
      (when (and (nonzero? (-> gnawer entity extra perm user-uint16 0))
                 (type-type? (-> (the-as process-drawable (-> gnawer child 0)) type) money))
        (gnawer-method-30 gnawer (the-as process-drawable (-> gnawer child 0)))
        (reset-specific-actor gnawer-name))))
  (none))

(defun safe-kill-crate-orb ((crate-name string))
  (let* ((obj-crate (the-as crate (process-by-ename crate-name))))
    (when obj-crate
      (cond
        ((name= (-> obj-crate state name) "special-contents-die") ;; when in orb collect phase
         (when (>= (-> obj-crate entity extra perm user-int8 0) 1) ;; all orbs have not been collected
           (set! (-> obj-crate entity extra perm user-int8 1) (+ (-> obj-crate entity extra perm user-int8 1) 1))
           (+! (-> obj-crate child-count) -1)
           ;; depspawn orb if exists
           (if (-> obj-crate child 0) ((method-of-type money deactivate) (the-as money (-> obj-crate child 0))))
           ;; mark as completed if done
           (when (or (= (-> obj-crate entity extra perm user-int8 1) 0)
                     (= (-> obj-crate entity extra perm user-int8 1) (float->int (-> (the-as crate obj-crate) fact pickup-amount)))) ;; if no orbs are left
             (set! (-> obj-crate entity extra perm user-int8 1) 0)
             (process-entity-status! obj-crate (entity-perm-status bit-4) #f)
             (process-entity-status! obj-crate (entity-perm-status dead) #t)
             (process-entity-status! obj-crate (entity-perm-status complete) #t)
             ((method-of-type crate deactivate) obj-crate))))
        (else
         (set! (-> obj-crate fact pickup-amount) (- (-> obj-crate fact pickup-amount) 1))
         (when (<= (-> obj-crate fact pickup-amount) 0)
           (set! (-> obj-crate entity extra perm user-int8 1) 0)
           (process-entity-status! obj-crate (entity-perm-status bit-4) #f)
           (process-entity-status! obj-crate (entity-perm-status dead) #t)
           (process-entity-status! obj-crate (entity-perm-status complete) #t)
           ((method-of-type crate deactivate) obj-crate))))))
  (none))

(defun safe-kill-crate-buzzer ((crate-name string) (run-pickup symbol) (kill-if-not-buzzer symbol))
  (let* ((obj-crate (process-by-ename crate-name))
         (is-cell-buzzer #f)) ;; swap to check if cell buzzer so it checks programatically if the count is 7
    (when (and run-pickup obj-crate (-> (the-as crate obj-crate) child 0))
      (process-entity-status! (the-as crate obj-crate) (entity-perm-status dead) #t)
      (let* ((buzzer (the-as buzzer (-> (the-as crate obj-crate) child 0)))
             (s5-2 (logand (the int (-> buzzer fact pickup-amount)) #xffff))
             (s4-1 (get-task-control (the-as game-task s5-2))))
        (go-virtual-process buzzer pickup #f (process->handle buzzer))
        (when (and (= (get-reminder s4-1 0) 127) (and (-> buzzer entity) (not (task-complete? *game-info* (the-as game-task s5-2)))))
          (set! is-cell-buzzer #t))))
    ;; depspawn buzzer if exists
    (if (and obj-crate
             kill-if-not-buzzer
             (not is-cell-buzzer)
             (name= (-> (the-as crate obj-crate) state name) "special-contents-die")
             (-> (the-as crate obj-crate) child 0))
      ((method-of-type buzzer deactivate) (the-as buzzer (-> (the-as crate obj-crate) child 0))))
    ;; depspawn crate
    (if (and obj-crate (not is-cell-buzzer) (name= (-> (the-as crate obj-crate) state name) "wait"))
      ((method-of-type crate deactivate) (the-as crate obj-crate))))
  (none))

(defun safe-kill-crate-cell ((crate-name string))
  (let* ((obj-crate (the-as crate (process-by-ename crate-name))))
    (when obj-crate
      (process-entity-status! obj-crate (entity-perm-status bit-4) #f)
      (process-entity-status! obj-crate (entity-perm-status dead) #t)
      (process-entity-status! obj-crate (entity-perm-status complete) #t)
      (cleanup-for-death obj-crate)
      (if (not (or (name= (-> (the-as crate obj-crate) state name) "die")
                   (name= (-> (the-as crate obj-crate) state name) "special-contents-die")))
        ((method-of-type crate deactivate) obj-crate)
        (safe-kill-fuel-cell-child crate-name)))))

(defun safe-pickup-crate-eco ((crate-name string))
  (let* ((obj-crate (process-by-ename crate-name)))
    (if (name= (-> (the-as crate obj-crate) state name) "wait") (safe-break-crate crate-name))
    ;; pickup eco if exists
    (when (and (name= (-> (the-as crate obj-crate) state name) "special-contents-die") (-> (the-as crate obj-crate) child 0))
      (go-virtual-process (the-as eco-collectable (-> (the-as crate obj-crate) child 0)) pickup #f (the-as handle #f))))
  (none))

(defun safe-pickup-eco ((eco-ename string))
  (let* ((obj-eco (process-by-ename eco-ename)))
    (when (-> obj-eco name)
      (go-virtual-process (the-as eco-collectable obj-eco) pickup #f (process->handle (the-as eco-collectable obj-eco)))))
  (none))

(defun set-level-money ((level string) (money int) (total-adjust float))
  ;; get the level index
  (let ((level-idx (-> *level-task-data-remap* (+ (-> (lookup-level-info (string->symbol level)) index) -1))))
    ;; increment the level money count
    (set! (-> *target* game money-per-level level-idx) money)
    ;; unlock level in menu
    (if (and (>= level-idx 0)
             (< level-idx (-> *level-task-data-remap* length))
             (zero? (-> *game-info* level-opened (-> *level-task-data-remap* level-idx))))
      (set! (-> *game-info* level-opened (-> *level-task-data-remap* level-idx)) (the-as uint 1)))
    ;; increment our total money in the game (out of the 2000 max orbs)
    (+! (-> *target* game money-total) total-adjust)
    ;; if we have all the money in our level, display the all orbs graphic
    (if (= (-> *target* game money-per-level level-idx) (-> (get-game-count level-idx) money-count))
      (activate-orb-all level-idx)))
  (none))

(defun give-buzzer-from-level ((buzzer-id float) (level string))
  (cond
    ((is-same-level? (-> (level-get-target-inside *level*) name) (string->symbol level))
     (pickup-collectable! (-> *target* fact) (pickup-type buzzer) buzzer-id (process->handle *target*)))
    (else (adjust (-> *target* game) 'buzzer buzzer-id (process->handle *target*)) (sound-play "cursor-options")))
  (none))

(defun safe-give-eco-by-target-idx ((idx int) (type int) (amount float))
  (let ((target (get-interactive-target idx))) (send-event target 'get-pickup type amount)))

;; task related function

(defun safe-break-eco-vent-rock ((rock-name string))
  (let ((rock (the-as ecoventrock (process-by-ename rock-name))))
    (when (and rock (name= (-> rock state name) "ecoventrock-idle"))
      (go-process rock ecoventrock-break #f))))

(defun set-fish-stats ((amount float) (status float))
  (let ((fish-game (the-as fisher (process-by-ename "fisher-1"))))
    (when fish-game
      (let ((amount-diff (- amount (if (= status 1) (-> fish-game caught) (-> fish-game missed)))))
        (when (> amount-diff 0)
          (if (= status 1)
            (send-event fish-game 'fisher-fish-caught (the int amount-diff))
            (send-event fish-game 'fisher-fish-die (the int amount-diff)))))))
  (none))

(defun check-release-from-periscope ((completed-periscope periscope))
  (when (and *target* (name= (-> *target* state name) "target-periscope") (process-close? completed-periscope 180000.0))
    (send-event *target* 'end-mode)
    (set! *camera-init-mat* (-> completed-periscope old-camera-matrix))
    (send-event *camera* 'change-state *camera-base-mode* 0)
    (set! *camera-init-mat* #f)))

(defun periscope-activate-by-name ((periscope-name string))
  (if (string= periscope-name "periscope-16") ;; periscope-16 doesn't exist but is used to check if it's the last mirror activated
    (let ((last-periscope (the-as periscope (process-by-ename "periscope-15"))))
      (when (and last-periscope (!= (-> (the-as periscope last-periscope) entity extra perm status) (entity-perm-status complete)))
        (set! (-> (the-as periscope last-periscope) entity extra perm status) (entity-perm-status complete))
        (check-release-from-periscope last-periscope)
        (go-process (the-as periscope last-periscope) periscope-power-on)))
    (let ((next-periscope (the-as periscope (process-by-ename periscope-name))))
      (when next-periscope
        (let ((current-periscope (ppointer->process (-> next-periscope brother))))
          (when current-periscope
            (cond
              ((type-type? (-> current-periscope type) periscope)
               (when (!= (-> (the-as periscope current-periscope) entity extra perm status) (entity-perm-status complete))
                 (set! (-> (the-as periscope current-periscope) entity extra perm status) (entity-perm-status complete))
                 (go-process next-periscope periscope-activate)
                 (check-release-from-periscope (the-as periscope current-periscope))
                 (go-process (the-as periscope current-periscope) periscope-power-on)))
              ((type-type? (-> current-periscope type) fuel-cell)
               (let ((mirror (the-as reflector-mirror (process-by-ename "reflector-mirror-2"))))
                 (if (and mirror (= (-> mirror state) reflector-mirror-idle)) (go-process mirror reflector-mirror-broken #f))))))))))
  (none))

(defun safe-deactivate-snow-bumper ((bumper-name string))
  (let ((bumper (the-as snow-bumper (process-by-ename bumper-name))))
    (when (and bumper
               (or (name= (-> bumper state name) "snow-bumper-active-close-idle")
                   (name= (-> bumper state name) "snow-bumper-active-far-idle")))
      (go-process bumper snow-bumper-deactivate))))

(defun safe-explode-dark-crystal ((crystal-name string) (crystal-num int))
  (close-specific-task! (game-task cave-dark-crystals) (task-status need-hint))
  (let ((crystal (the-as dark-crystal (process-by-ename crystal-name))))
    (cond
      ((and crystal (name= (-> crystal state name) "dark-crystal-idle"))
       (process-entity-status! crystal (entity-perm-status complete) #t) ;; set before exploding so we know to not to run the else code below internally if exploding from remote
       (go-process crystal dark-crystal-explode))
      (else
       (when (nonzero? crystal-num)
         (let* ((s4-0 (get-task-control (game-task cave-dark-crystals)))
                (s3-0 (logior (get-reminder s4-0 3) (ash 1 crystal-num))))
           (save-reminder s4-0 s3-0 3)))))))

(defun safe-move-lpc-chamber ((stop-palce int))
  (save-reminder (get-task-control (game-task sunken-room)) stop-palce 0)
  (if (= stop-palce 1)
    (let ((chamber (the-as exit-chamber (process-by-ename "exit-chamber-1"))))
      (if (and chamber (name= (-> chamber state name) "exit-chamber-charger-puzzle"))
        (go-process chamber exit-chamber-charger-puzzle-beaten)
        (if (and chamber
                 (not (name= (-> chamber state name) "exit-chamber-lower"))
                 (not (name= (-> chamber state name) "exit-chamber-rise")))
          (reset-specific-actor "exit-chamber-1"))))
    (let ((chamber-dummy (the-as exit-chamber-dummy (process-by-ename "exit-chamber-dummy-1")))
          (chamber (the-as exit-chamber (process-by-ename "exit-chamber-1"))))
      (if (and chamber
               (not (name= (-> chamber state name) "exit-chamber-lower"))
               (not (name= (-> chamber state name) "exit-chamber-rise")))
        (reset-specific-actor "exit-chamber-1"))
      (if (and chamber-dummy (name= (-> chamber-dummy state name) "exit-chamber-dummy-wait-to-appear"))
        (go-process chamber-dummy exit-chamber-dummy-idle))))
  (none))

(defun safe-remove-oracle-eye ((ename string) (first-eye symbol))
  (let ((oracle-statue (the-as oracle (process-by-ename ename))))
    (cond
      ((not first-eye) (let ((a0-25 (handle->process (-> oracle-statue right-eye-cell)))) (if a0-25 (deactivate a0-25))))
      (else (let ((a0-29 (handle->process (-> oracle-statue left-eye-cell)))) (if a0-29 (deactivate a0-29)))))))

(defun handle-remote-task-update ((task game-task) (status task-status))
  ;; need-hint
  (when (= (the-as uint status) (the-as uint (task-status need-hint)))
    (cond
      ((= task (game-task beach-pelican))
       (let ((task-process (the-as pelican (process-by-ename "pelican-1"))))
         (when (and task-process (name= (-> task-process state name) "pelican-circle"))
           (go-process task-process
                       pelican-dive
                       (-> task-process path-dive0)
                       (-> task-process path-to-nest0)
                       (-> *PELICAN-bank* to-nest0-time)))))
      ((= task (game-task plunger-lurker-hit))
       (let ((task-process (the-as plunger-lurker (process-by-ename "plunger-lurker-3"))))
         (when (and task-process (name= (-> task-process state name) "plunger-lurker-idle"))
           (process-entity-status! task-process (entity-perm-status complete) #t)
           (go-process task-process plunger-lurker-die))))))
  ;; need-introduction
  (when (= (the-as uint status) (the-as uint (task-status need-introduction)))
    (cond
      ((= task (game-task village3-button))
       (reset-all-present-warp-gates)
       (let ((s4-1 (get-task-control task)))
         (when (zero? (get-reminder s4-1 2))
           (let ((s3-1 (max 1 (the int (-> *game-info* fuel))))) (save-reminder s4-1 s3-1 2)))))))
  ;; need-reminder-a
  (when (= (the-as uint status) (the-as uint (task-status need-reminder-a)))
    (cond
      ((= task (game-task village2-levitator)) (reset-all-present-warp-gates))))
  ;; need-reminder
  (when (= (the-as uint status) (the-as uint (task-status need-reminder)))
    (cond
      ((= task (game-task beach-seagull))
       (let ((task-process (process-by-ename "seagullflock-1")))
         (when (and task-process (not (name= (-> task-process state name) "seagullflock-at-waterfall")))
           (beach-rock-trigger))))
      ((= task (game-task misty-muse)) (safe-complete-and-kill "muse-2"))
      ((= task (game-task swamp-tether-1))
       (let ((task-process (process-by-ename "swamp-tetherrock-13")))
         (when (and task-process (name= (-> task-process state name) "swamp-tetherrock-idle"))
           (go-process task-process swamp-tetherrock-break))))
      ((= task (game-task swamp-tether-2))
       (let ((task-process (process-by-ename "swamp-tetherrock-14")))
         (when (and task-process (name= (-> task-process state name) "swamp-tetherrock-idle"))
           (go-process task-process swamp-tetherrock-break))))
      ((= task (game-task swamp-tether-3))
       (let ((task-process (process-by-ename "swamp-tetherrock-15")))
         (when (and task-process (name= (-> task-process state name) "swamp-tetherrock-idle"))
           (go-process task-process swamp-tetherrock-break))))
      ((= task (game-task swamp-tether-4))
       (let ((task-process (process-by-ename "swamp-tetherrock-16")))
         (when (and task-process (name= (-> task-process state name) "swamp-tetherrock-idle"))
           (go-process task-process swamp-tetherrock-break))))
      ((= task (game-task rolling-robbers))
       (safe-kill-enemy "robber-2")
       (safe-kill-enemy "robber-3")
       (safe-kill-enemy "robber-4")
       (safe-kill-enemy "robber-5"))
      ((= task (game-task ogre-boss)) (safe-kill-klaww))))
  ;; need-reward-speech
  (when (= (the-as uint status) (the-as uint (task-status need-reward-speech)))
    (cond
      ((= task (game-task village2-levitator))
       (let ((boulder (process-by-ename "fireboulder-6"))) (if boulder (go-process boulder fireboulder-hover))))
      ((= task (game-task village4-button)) (reset-all-present-warp-gates))))
  ;; need-resolution
  (when (>= (the-as uint status) (the-as uint (task-status need-resolution)))
    (if (= (-> *multiplayer-info* game mode) (run-mode lockout)) (check-lockout-restrictions))
    (cond
      ((= task (game-task jungle-eggtop))
       (let ((task-process (process-by-ename "eggtop-6")))
         (when task-process
           (save-reminder (get-task-control (-> task-process entity extra perm task)) 1 0)
           (go-process task-process eggtop-close #f)
           (safe-kill-fuel-cell-child "eggtop-6"))))
      ((= task (game-task jungle-lurkerm)))
      ((= task (game-task jungle-tower)) (safe-kill-fuel-cell "fuel-cell-1"))
      ((= task (game-task jungle-fishgame)))
      ((= task (game-task jungle-plant))
       (process-entity-status! (process-by-ename "plant-boss-3") (entity-perm-status complete) #t)
       (let ((proc (the-as process (process-by-ename "plant-boss-3"))))
         (when (and proc (-> proc child))
           (let ((child (ppointer->process (-> proc child))))
             (cond
               ((type-type? (-> child type) fuel-cell)
                (process-entity-status! (the-as fuel-cell child) (entity-perm-status dead) #t)
                (deactivate child))
               ((and (-> proc brother) (type-type? (-> child type) money))
                (let ((brother (ppointer->process (-> child brother))))
                  (when (type-type? (-> brother type) fuel-cell)
                    (process-entity-status! (the-as fuel-cell brother) (entity-perm-status dead) #t)
                    (deactivate brother)))))))))
      ((= task (game-task jungle-buzzer)) (safe-kill-all-fuel-cell-instances "jungle-buzzer"))
      ((= task (game-task jungle-canyon-end)) (safe-kill-fuel-cell "fuel-cell-46"))
      ((= task (game-task jungle-temple-door)) (safe-kill-fuel-cell "fuel-cell-49"))
      ((= task (game-task village1-yakow)))
      ((= task (game-task village1-mayor-money)))
      ((= task (game-task village1-uncle-money)))
      ((= task (game-task village1-oracle-money1)) (safe-remove-oracle-eye "oracle-1" #f))
      ((= task (game-task village1-oracle-money2)) (safe-remove-oracle-eye "oracle-1" #t))
      ((= task (game-task beach-ecorocks))
       (safe-break-eco-vent-rock "ecoventrock-3")
       (safe-break-eco-vent-rock "ecoventrock-4")
       (safe-break-eco-vent-rock "ecoventrock-5")
       (safe-break-eco-vent-rock "ecoventrock-6")
       (safe-break-eco-vent-rock "ecoventrock-7")
       (safe-kill-fuel-cell-child "ecoventrock-3")
       (safe-kill-fuel-cell-child "ecoventrock-4")
       (safe-kill-fuel-cell-child "ecoventrock-5")
       (safe-kill-fuel-cell-child "ecoventrock-6")
       (safe-kill-fuel-cell-child "ecoventrock-7"))
      ((= task (game-task beach-pelican))
       (let ((task-process (the-as pelican (process-by-ename "pelican-1"))))
         (when task-process
           (cond
             ((name= (-> task-process state name) "pelican-explode") (reset-specific-actor "pelican-1"))
             (else
              (let ((cell (handle->process (-> task-process fuel-cell))))
                (when cell
                  (process-entity-status! (the-as fuel-cell cell) (entity-perm-status dead) #t)
                  (deactivate cell))))))))
      ((= task (game-task beach-flutflut)))
      ((= task (game-task beach-seagull)) (safe-kill-fuel-cell-child "lrocklrg-1"))
      ((= task (game-task beach-cannon)) (kill-by-name "babak-with-cannon-1" *active-pool*))
      ((= task (game-task beach-buzzer)) (safe-kill-all-fuel-cell-instances "beach-buzzer"))
      ((= task (game-task beach-gimmie)) (safe-kill-fuel-cell "fuel-cell-40"))
      ((= task (game-task beach-sentinel)) (safe-kill-fuel-cell "fuel-cell-42"))
      ((= task (game-task misty-muse)))
      ((= task (game-task misty-boat)) (safe-kill-fuel-cell "fuel-cell-12"))
      ((= task (game-task misty-warehouse)) (safe-kill-fuel-cell "fuel-cell-11"))
      ((= task (game-task misty-cannon)) (kill-by-name "babak-with-cannon-5" *active-pool*))
      ((= task (game-task misty-bike)) (safe-kill-fuel-cell "boat-fuelcell-1"))
      ((= task (game-task misty-buzzer)) (safe-kill-all-fuel-cell-instances "misty-buzzer"))
      ((= task (game-task misty-bike-jump)) (safe-kill-fuel-cell "fuel-cell-51"))
      ((= task (game-task misty-eco-challenge)) (safe-kill-fuel-cell "fuel-cell-50"))
      ((= task (game-task village2-gambler-money)))
      ((= task (game-task village2-geologist-money)))
      ((= task (game-task village2-warrior-money)))
      ((= task (game-task village2-oracle-money1)) (safe-remove-oracle-eye "oracle-2" #f))
      ((= task (game-task village2-oracle-money2)) (safe-remove-oracle-eye "oracle-2" #t))
      ((= task (game-task swamp-billy)))
      ((= task (game-task swamp-flutflut)) (safe-kill-fuel-cell "fuel-cell-15"))
      ((= task (game-task swamp-battle))
       (let ((task-process (the-as battlecontroller (process-by-ename "swamp-battlecontroller-1"))))
         (when task-process
           (set! (-> task-process final-pickup-type) (pickup-type none))
           (go-virtual-process task-process battlecontroller-die))))
      ((= task (game-task swamp-tether-1)) (kill-by-name "swamp-tetherrock-13" *active-pool*))
      ((= task (game-task swamp-tether-2)) (kill-by-name "swamp-tetherrock-14" *active-pool*))
      ((= task (game-task swamp-tether-3)) (kill-by-name "swamp-tetherrock-15" *active-pool*))
      ((= task (game-task swamp-tether-4)) (kill-by-name "swamp-tetherrock-16" *active-pool*))
      ((= task (game-task swamp-buzzer)) (safe-kill-all-fuel-cell-instances "swamp-buzzer"))
      ((= task (game-task sunken-platforms)) (safe-kill-fuel-cell "fuel-cell-24"))
      ((= task (game-task sunken-pipe))
       (let ((task-process (process-by-ename "sunken-pipegame-1")))
         (when (and task-process (name= (-> task-process state name) "sunken-pipegame-begin-play"))
           (reset-specific-actor "sunken-pipegame-1"))))
      ((= task (game-task sunken-slide)))
      ((= task (game-task sunken-room)) (safe-kill-fuel-cell-child "exit-chamber-1"))
      ((= task (game-task sunken-sharks)) (safe-kill-fuel-cell "fuel-cell-26"))
      ((= task (game-task sunken-buzzer)) (safe-kill-all-fuel-cell-instances "sunken-buzzer"))
      ((= task (game-task sunken-top-of-helix)) (safe-kill-fuel-cell "fuel-cell-25"))
      ((= task (game-task sunken-spinning-room)) (safe-kill-fuel-cell "fuel-cell-52"))
      ((= task (game-task rolling-race)))
      ((= task (game-task rolling-robbers))
       (safe-kill-fuel-cell-child "robber-2")
       (safe-kill-fuel-cell-child "robber-3")
       (safe-kill-fuel-cell-child "robber-4")
       (safe-kill-fuel-cell-child "robber-5"))
      ((= task (game-task rolling-moles)))
      ((= task (game-task rolling-plants)) (reset-specific-actor "happy-plant-1"))
      ((= task (game-task rolling-lake)) (safe-kill-fuel-cell "fuel-cell-45"))
      ((= task (game-task rolling-buzzer)) (safe-kill-all-fuel-cell-instances "rolling-buzzer"))
      ((= task (game-task rolling-ring-chase-1))
       (safe-kill-fuel-cell-child "race-ring-24")
       (safe-deactivate-ring "race-ring-9")
       (safe-deactivate-ring "race-ring-1")
       (safe-deactivate-ring "race-ring-25")
       (safe-deactivate-ring "race-ring-12")
       (safe-deactivate-ring "race-ring-13")
       (safe-deactivate-ring "race-ring-14")
       (safe-deactivate-ring "race-ring-15")
       (safe-deactivate-ring "race-ring-16")
       (safe-deactivate-ring "race-ring-17")
       (safe-deactivate-ring "race-ring-18")
       (safe-deactivate-ring "race-ring-19")
       (safe-deactivate-ring "race-ring-20")
       (safe-deactivate-ring "race-ring-21")
       (safe-deactivate-ring "race-ring-22")
       (safe-deactivate-ring "race-ring-2")
       (safe-deactivate-ring "race-ring-26")
       (safe-deactivate-ring "race-ring-4")
       (safe-deactivate-ring "race-ring-5")
       (safe-deactivate-ring "race-ring-6")
       (safe-deactivate-ring "race-ring-7")
       (safe-deactivate-ring "race-ring-8")
       (safe-deactivate-ring "race-ring-10")
       (safe-deactivate-ring "race-ring-11")
       (safe-deactivate-ring "race-ring-3")
       (safe-deactivate-ring "race-ring-23")
       (safe-deactivate-ring "race-ring-24"))
      ((= task (game-task rolling-ring-chase-2))
       (safe-kill-fuel-cell-child "race-ring-24")
       (safe-deactivate-ring "race-ring-36")
       (safe-deactivate-ring "race-ring-37")
       (safe-deactivate-ring "race-ring-38")
       (safe-deactivate-ring "race-ring-27")
       (safe-deactivate-ring "race-ring-28")
       (safe-deactivate-ring "race-ring-29")
       (safe-deactivate-ring "race-ring-30")
       (safe-deactivate-ring "race-ring-31")
       (safe-deactivate-ring "race-ring-32")
       (safe-deactivate-ring "race-ring-33")
       (safe-deactivate-ring "race-ring-34")
       (safe-deactivate-ring "race-ring-35")
       (safe-deactivate-ring "race-ring-39")
       (safe-deactivate-ring "race-ring-40")
       (safe-deactivate-ring "race-ring-41")
       (safe-deactivate-ring "race-ring-42")
       (safe-deactivate-ring "race-ring-43")
       (safe-deactivate-ring "race-ring-44")
       (safe-deactivate-ring "race-ring-45")
       (safe-deactivate-ring "race-ring-46")
       (safe-deactivate-ring "race-ring-47")
       (safe-deactivate-ring "race-ring-48")
       (safe-deactivate-ring "race-ring-49")
       (safe-deactivate-ring "race-ring-50")
       (safe-deactivate-ring "race-ring-51")
       (safe-deactivate-ring "race-ring-52")
       (safe-deactivate-ring "race-ring-53"))
      ((= task (game-task snow-eggtop))
       (let ((task-process (process-by-ename "snow-eggtop-4")))
         (when task-process
           (go-process task-process snow-eggtop-activate)
           (safe-kill-fuel-cell-child "snow-eggtop-4"))))
      ((= task (game-task snow-ram))
       (safe-kill-enemy "ram-13")
       (safe-kill-enemy "ram-14")
       (safe-kill-enemy "ram-15")
       (safe-kill-fuel-cell-child "ram-13")
       (safe-kill-fuel-cell-child "ram-14")
       (safe-kill-fuel-cell-child "ram-15"))
      ((= task (game-task snow-fort)) (safe-kill-fuel-cell "fuel-cell-30"))
      ((= task (game-task snow-ball))
       (let ((task-process (process-by-ename "snow-switch-1")))
         (when task-process
           (go-process task-process snow-switch-activate))))
      ((= task (game-task snow-bunnies)) (safe-kill-fuel-cell "fuel-cell-28"))
      ((= task (game-task snow-buzzer)) (safe-kill-all-fuel-cell-instances "snow-buzzer"))
      ((= task (game-task snow-bumpers))
       ;; deactivate in case of recording at end of bumpers
       (safe-deactivate-snow-bumper "snow-bumper-69")
       (safe-deactivate-snow-bumper "snow-bumper-70")
       (safe-deactivate-snow-bumper "snow-bumper-71")
       (safe-deactivate-snow-bumper "snow-bumper-72")
       (safe-deactivate-snow-bumper "snow-bumper-73")
       (safe-deactivate-snow-bumper "snow-bumper-74")
       (safe-deactivate-snow-bumper "snow-bumper-75")
       (safe-deactivate-snow-bumper "snow-bumper-76")
       (safe-deactivate-snow-bumper "snow-bumper-77")
       (safe-deactivate-snow-bumper "snow-bumper-78")
       (safe-deactivate-snow-bumper "snow-bumper-79")
       (safe-deactivate-snow-bumper "snow-bumper-80")
       (safe-deactivate-snow-bumper "snow-bumper-81")
       ;; kill cell
       (safe-kill-fuel-cell-child "snow-bumper-69")
       (safe-kill-fuel-cell-child "snow-bumper-70")
       (safe-kill-fuel-cell-child "snow-bumper-71")
       (safe-kill-fuel-cell-child "snow-bumper-72")
       (safe-kill-fuel-cell-child "snow-bumper-73")
       (safe-kill-fuel-cell-child "snow-bumper-74")
       (safe-kill-fuel-cell-child "snow-bumper-75")
       (safe-kill-fuel-cell-child "snow-bumper-76")
       (safe-kill-fuel-cell-child "snow-bumper-77")
       (safe-kill-fuel-cell-child "snow-bumper-78")
       (safe-kill-fuel-cell-child "snow-bumper-79")
       (safe-kill-fuel-cell-child "snow-bumper-80")
       (safe-kill-fuel-cell-child "snow-bumper-81"))
      ((= task (game-task snow-cage)) (safe-kill-crate-cell "crate-2986"))
      ((= task (game-task firecanyon-buzzer)) (safe-kill-all-fuel-cell-instances "firecanyon-buzzer"))
      ((= task (game-task firecanyon-end)) (safe-kill-fuel-cell-child "racer-8"))
      ((= task (game-task citadel-sage-green))
       (safe-kill-fuel-cell-child "citb-generator-1")
       (reset-specific-actor "green-sagecage-1")
       (check-citadel-skip))
      ((= task (game-task citadel-sage-blue))
       (safe-kill-fuel-cell-child "citb-generator-3")
       (reset-specific-actor "blue-sagecage-1")
       (let ((cit-cam (process-by-ename "citadelcam-1"))) (when cit-cam (send-event cit-cam 'trigger))))
      ((= task (game-task citadel-sage-red))
       (safe-kill-fuel-cell-child "citb-generator-4")
       (reset-specific-actor "red-sagecage-1")
       (let ((cit-cam (process-by-ename "citadelcam-1"))) (when cit-cam (send-event cit-cam 'trigger))))
      ((= task (game-task citadel-sage-yellow))
       (safe-kill-fuel-cell-child "citb-generator-2")
       (reset-specific-actor "yellow-sagecage-1")
       (let ((cit-cam (process-by-ename "citadelcam-1"))) (when cit-cam (send-event cit-cam 'trigger))))
      ((= task (game-task village3-extra1)) (safe-kill-crate-cell "crate-2987"))
      ((= task (game-task village1-buzzer)) (safe-kill-all-fuel-cell-instances "village1-buzzer"))
      ((= task (game-task village2-buzzer)) (safe-kill-all-fuel-cell-instances "village2-buzzer"))
      ((= task (game-task village3-buzzer)) (safe-kill-all-fuel-cell-instances "village3-buzzer"))
      ((= task (game-task cave-gnawers))
       (safe-kill-enemy "gnawer-11")
       (safe-kill-enemy "gnawer-12")
       (safe-kill-enemy "gnawer-13")
       (safe-kill-enemy "gnawer-14")
       (safe-kill-enemy "gnawer-15")
       (safe-kill-enemy "gnawer-16")
       (safe-kill-enemy "gnawer-17")
       (safe-kill-enemy "gnawer-18")
       (safe-kill-enemy "gnawer-19")
       (safe-kill-fuel-cell-child "gnawer-11")
       (safe-kill-fuel-cell-child "gnawer-12")
       (safe-kill-fuel-cell-child "gnawer-13")
       (safe-kill-fuel-cell-child "gnawer-14")
       (safe-kill-fuel-cell-child "gnawer-15")
       (safe-kill-fuel-cell-child "gnawer-16")
       (safe-kill-fuel-cell-child "gnawer-17")
       (safe-kill-fuel-cell-child "gnawer-18")
       (safe-kill-fuel-cell-child "gnawer-19"))
      ((= task (game-task cave-dark-crystals))
       (safe-explode-dark-crystal "dark-crystal-1" 1)
       (safe-explode-dark-crystal "dark-crystal-2" 2)
       (safe-explode-dark-crystal "dark-crystal-3" 3)
       (safe-explode-dark-crystal "dark-crystal-4" 4)
       (safe-explode-dark-crystal "dark-crystal-5" 5)
       (safe-kill-fuel-cell-child "dark-crystal-1")
       (safe-kill-fuel-cell-child "dark-crystal-2")
       (safe-kill-fuel-cell-child "dark-crystal-3")
       (safe-kill-fuel-cell-child "dark-crystal-4")
       (safe-kill-fuel-cell-child "dark-crystal-5"))
      ((= task (game-task cave-dark-climb)) (safe-kill-fuel-cell "fuel-cell-59"))
      ((= task (game-task cave-robot-climb)) (safe-kill-fuel-cell "fuel-cell-57"))
      ((= task (game-task cave-swing-poles)) (safe-kill-fuel-cell "fuel-cell-56"))
      ((= task (game-task cave-spider-tunnel)) (safe-kill-fuel-cell "fuel-cell-58"))
      ((= task (game-task cave-platforms)) (safe-kill-fuel-cell "fuel-cell-60"))
      ((= task (game-task cave-buzzer)) (safe-kill-all-fuel-cell-instances "cave-buzzer"))
      ((= task (game-task ogre-boss)) (safe-kill-klaww) (safe-kill-fuel-cell-child "ogreboss-1"))
      ((= task (game-task ogre-end)) (safe-kill-fuel-cell-child "racer-15"))
      ((= task (game-task ogre-buzzer)) (safe-kill-all-fuel-cell-instances "ogre-buzzer"))
      ((= task (game-task lavatube-end)) (safe-kill-fuel-cell-child "racer-36"))
      ((= task (game-task lavatube-buzzer)) (safe-kill-all-fuel-cell-instances "ogre-buzzer"))
      ((= task (game-task citadel-buzzer)) (safe-kill-all-fuel-cell-instances "citadel-buzzer"))
      ((= task (game-task training-gimmie)) (safe-kill-fuel-cell "fuel-cell-55"))
      ((= task (game-task training-door)) (safe-kill-fuel-cell "fuel-cell-53"))
      ((= task (game-task training-climb)) (safe-kill-fuel-cell "fuel-cell-54"))
      ((= task (game-task training-buzzer)) (safe-kill-all-fuel-cell-instances "training-buzzer"))
      ((= task (game-task village3-miner-money1)))
      ((= task (game-task village3-miner-money2)))
      ((= task (game-task village3-miner-money3)))
      ((= task (game-task village3-miner-money4)))
      ((= task (game-task village3-oracle-money1)) (safe-remove-oracle-eye "oracle-3" #f))
      ((= task (game-task village3-oracle-money2)) (safe-remove-oracle-eye "oracle-3" #t))
      ((= task (game-task firecanyon-assistant)))
      ((= task (game-task village2-levitator)))
      ((= task (game-task swamp-arm)))
      ((= task (game-task village3-button)))
      ((= task (game-task red-eggtop)))
      ((= task (game-task lavatube-balls)))
      ((= task (game-task lavatube-start)))
      ((= task (game-task intro)))
      ((= task (game-task ogre-secret)) (safe-kill-fuel-cell "fuel-cell-62"))
      ((= task (game-task village4-button)))
      ((= task (game-task finalboss-movies)))
      ((= task (game-task plunger-lurker-hit)))
      ((= task (game-task leaving-misty)))
      ((= task (game-task assistant-village3)))))
  (none))

(defun handle-remote-taunt ((target-idx int) (name string))
  (format 0 "handle-remote-taunt debug:~%~Ttarget-idx: ~D~%~Tname: ~S~%" target-idx name)
  (if (process-close? (the process-drawable (handle->process (-> *remote-targets* target-idx))) 500000.0)
    (send-event (handle->process (-> *remote-targets* target-idx)) 'taunt name)
    (format 0 "remote-target ~D too far away!~%" target-idx))
  (none))

(defun handle-remote-interaction ((remote-player remote-player-info) (tgt-idx int))
  (when (!= (-> remote-player inter_type) (interaction-type none))
    (case (-> remote-player inter_type)
      (((interaction-type eco-yellow) (interaction-type eco-red) (interaction-type eco-blue) (interaction-type eco-green))
       (when (level-is-alive-or-active? (-> remote-player inter_level))
         (when (level-is-alive-or-active? (-> remote-player inter_level)))
         (if (string-starts-with= (-> remote-player inter_parent) "crate-") (safe-pickup-crate-eco (-> remote-player inter_parent)))
         (if (and (not (string-starts-with= (-> remote-player inter_name) "ecovent-"))
                  (not (string-starts-with= (-> remote-player inter_name) "vent"))
                  (not (string= (-> remote-player inter_name) "reflector-mirror-2")))
           (safe-pickup-eco (-> remote-player inter_name))))
       (if (and (= (-> remote-player inter_type) (interaction-type eco-green))
                (= (-> remote-player inter_amount) 1)
                (string-starts-with= (-> remote-player inter_name) "ecovent-"))
         (safe-give-eco-by-target-idx tgt-idx (the int (-> remote-player inter_type)) 5.0)
         (safe-give-eco-by-target-idx tgt-idx (the int (-> remote-player inter_type)) (-> remote-player inter_amount))))
      (((interaction-type money))
       (cond
         ;; set orb count
         ((string= (-> remote-player inter_parent) "client")
          (let ((adjust-amount (- (-> remote-player inter_amount) (-> *game-info* money))))
            (when (!= adjust-amount 0)
              (send-event *target* 'get-pickup 5 adjust-amount))
            (if (not (string= (-> remote-player inter_level) "none"))
              (set-level-money (-> remote-player inter_level) (the int (-> remote-player inter_status)) adjust-amount))))
         ;; remove orb
         (else
          (cond
            ((string-starts-with= (-> remote-player inter_parent) "orb-cache-top-")
             (safe-kill-cache-orb (-> remote-player inter_parent)))
            ((string-starts-with= (-> remote-player inter_parent) "crate-") (safe-kill-crate-orb (-> remote-player inter_parent)))
            ((string-starts-with= (-> remote-player inter_parent) "gnawer-") (safe-kill-gnawer-orb (-> remote-player inter_parent)))
            ((string-starts-with= (-> remote-player inter_parent) "plant-boss-") (safe-kill-plant-boss-orb))
            (else (safe-kill-orb (-> remote-player inter_name)))))))
      (((interaction-type game-task))
       (when (!= (the-as game-task (the int (-> remote-player inter_amount))) (game-task finalboss-movies))
         (if (is-cell-collect? (the-as game-task (the int (-> remote-player inter_amount)))
                               (the-as task-status (the int (-> remote-player inter_status))))
           (dm-give-cell-from-remote (the-as game-task (the int (-> remote-player inter_amount))))
           (close-specific-task-from-remote! (the-as game-task (the int (-> remote-player inter_amount)))
                                             (the-as task-status (the int (-> remote-player inter_status)))))))
      (((interaction-type enemy-death)) (safe-kill-enemy (-> remote-player inter_name)))
      (((interaction-type buzzer))
       (if (= (-> remote-player inter_cleanup) 0)
         (give-buzzer-from-level (-> remote-player inter_amount) (-> remote-player inter_level)))
       (if (and (level-is-alive-or-active? (-> remote-player inter_level))
                (string-starts-with= (-> remote-player inter_parent) "crate-"))
         (safe-kill-crate-buzzer (-> remote-player inter_parent)
                                 (or (= (-> remote-player inter_cleanup) 0) (name= (-> remote-player inter_name) "buzzer-last"))
                                 (= (-> remote-player inter_cleanup) 1))))
      (((interaction-type crate)) (safe-break-crate (-> remote-player inter_name)))
      (((interaction-type fish)) (set-fish-stats (-> remote-player inter_amount) (-> remote-player inter_status)))
      (((interaction-type periscope)) (periscope-activate-by-name (-> remote-player inter_name)))
      (((interaction-type snow-bumper)) (safe-deactivate-snow-bumper (-> remote-player inter_name)))
      (((interaction-type dark-crystal))
       (safe-explode-dark-crystal (-> remote-player inter_name) (the int (-> remote-player inter_status))))
      (((interaction-type lpc-chamber)) (safe-move-lpc-chamber (the int (-> remote-player inter_status))))
      (((interaction-type boss-phase))
       (safe-boss-up-to-phase (-> remote-player inter_name)
                              (the int (-> remote-player inter_amount))
                              (= (-> remote-player inter_status) 1)))
      (((interaction-type taunt)) (handle-remote-taunt tgt-idx (-> remote-player inter_name)))))
  (none))
